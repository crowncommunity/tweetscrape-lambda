service: tweetscraper

plugins:
  - serverless-plugin-ifelse
  - serverless-offline

custom:
    is_local: ${env:IS_LOCAL, ""}
    serverless-offline:
        host: 0.0.0.0
    Stage: ${opt:stage, 'dev'}
    ServiceName: tweetscraper
    AccountId:
        Ref: "AWS::AccountId"
    TweetBucket: ${self:custom.ServiceName}-bucket
    ScrapeQueue: ${self:custom.ServiceName}-queue
    ScrapeSearch: ${self:custom.ServiceName}-search
    ScrapeThrottleTTL: 1800
    ESEndPoint:
        Fn::GetAtt:
            - ElasticSearchInstance
            - DomainEndpoint
    ESRegion:
        Ref: "AWS::Region"
    local: ${file(./local-env.yml)}
    serverlessIfElse:
        -   If: '"x${self:custom.is_local}" == "x"'
            Set:
                provider.environment.ELASTIC_HOST: ${self:custom.ESEndPoint}
                provider.environment.ELASTIC_REGION: ${self:custom.ESRegion}
                provider.environment.SCRAPE_LIMIT: ${self:custom.ScrapeThrottleTTL}
                provider.environment.ACCOUNT_ID: ${self:custom.AccountId}

provider:
    name: aws
    stage: ${self:custom.Stage}
    runtime: nodejs8.10
    memorySize: 128
    environment:
        SCRAPE_URL: "http://tweetscraper-env.dbdzfu5nui.us-west-1.elasticbeanstalk.com/tweet/"
        INDEX_NAME: ${self:custom.ScrapeSearch}-index
        S3_SAVE_BUCKET: ${self:custom.TweetBucket}
        QUEUE_NAME: ${self:custom.ScrapeQueue}
        ELASTIC_HOST: ${self:custom.local.ESEndPoint}
        ELASTIC_REGION: ${self:custom.local.ESRegion}
        SCRAPE_LIMIT: ${self:custom.local.ScrapeThrottleTTL}
        ACCOUNT_ID: ${self:custom.local.AccountId}

    iamRoleStatements:
        -   Effect: Allow
            Action:
                - sqs:DeleteMessage
                - sqs:DeleteMessageBatch
                - sqs:ReceiveMessage
                - sqs:SendMessage
                - sqs:SendMessageBatch
                - sqs:GetQueueUrl
                - sqs:GetQueueAttributes
            Resource: arn:aws:sqs:*:*:${self:custom.ScrapeQueue}
        -   Effect: Allow
            Action:
                - "es:ESHttpHead"
                - "es:ESHttpPost"
                - "es:ESHttpGet"
                - "es:ESHttpDelete"
                - "es:ESHttpPut"
                - "es:DescribeElasticsearchDomain"
                - "es:DescribeElasticsearchDomainConfig"
            Resource: arn:aws:es:*:*:domain/*
        -   Effect: Allow
            Action:
                - s3:*
            Resource:
                - arn:aws:s3:::${self:custom.TweetBucket}/*
                - arn:aws:s3:::${self:custom.TweetBucket}

functions:
    scrape:
        handler: handler.scrape
        events:
            - sqs:
                arn:
                    Fn::GetAtt:
                        - ScrapeQueue
                        - Arn
                batchSize: 10
        reservedConcurrency: 3
    index:
        handler: handler.hello
        events:
            - http: GET hello
    enqueue:
        handler: handler.enqueue
        events:
            - http:
                method: POST
                path: enqueue
                cors: true
                # authorizer:
                #     type: aws_iam
                request:
                    querystrings:
                        parameters:
                            tweet: false

resources:
    Resources:
        ScrapeQueue:
            Type: "AWS::SQS::Queue"
            Properties:
                QueueName: ${self:custom.ScrapeQueue}
                VisibilityTimeout: 30
                MessageRetentionPeriod: 345600
        TweetImageBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.TweetBucket}
                VersioningConfiguration:
                    Status: Enabled
                CorsConfiguration:
                    CorsRules:
                        -   AllowedOrigins:
                                - '*'
                            AllowedHeaders:
                                - '*'
                            AllowedMethods:
                                - GET
                                - PUT
                                - POST
                                - DELETE
                                - HEAD
                            MaxAge: 3000
        TweetImageBucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket:
                    Ref: TweetImageBucket
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -   Effect: Allow
                            Action: "s3:*"
                            Resource: "arn:aws:s3:::${self:custom.TweetBucket}"
                            Principal:
                                AWS:
                                    Fn::Join:
                                        - ":"
                                        -   - "arn:aws:iam:"
                                            - Ref: 'AWS::AccountId'
                                            - "root"
        ElasticSearchInstance:
            Type: AWS::Elasticsearch::Domain
            Properties:
                DomainName: ${self:custom.ScrapeSearch}
                EBSOptions:
                    EBSEnabled: true
                    VolumeType: gp2
                    VolumeSize: 10
                ElasticsearchClusterConfig:
                    InstanceType: t2.small.elasticsearch
                    InstanceCount: 1
                    DedicatedMasterEnabled: false
                    ZoneAwarenessEnabled: false
                ElasticsearchVersion: 6.4
                AccessPolicies:
                    Version: "2012-10-17"
                    Statement:
                        -   Effect: Allow
                            Action: "es:*"
                            Resource:
                                Fn::Join:
                                    - ":"
                                    -   - "arn:aws:es"
                                        - Ref: 'AWS::Region'
                                        - Ref: 'AWS::AccountId'
                                        - "domain/${self:custom.ScrapeSearch}/*"
                            Principal:
                                AWS:
                                    Fn::Join:
                                        - ":"
                                        -   - "arn:aws:iam:"
                                            - Ref: 'AWS::AccountId'
                                            - "root"
